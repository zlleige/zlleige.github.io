<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>磊迹</title>
  
  <subtitle>热爱可抵岁月漫长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-08-20T07:59:22.318Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lei Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中间件/clickhouse/clickhouse学习笔记</title>
    <link href="http://yoursite.com/%E4%B8%AD%E9%97%B4%E4%BB%B6/clickhouse/clickhouse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/%E4%B8%AD%E9%97%B4%E4%BB%B6/clickhouse/clickhouse%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-08-20T07:59:22.318Z</published>
    <updated>2023-08-20T07:59:22.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="clickhouse-特点"><a href="#clickhouse-特点" class="headerlink" title="clickhouse 特点"></a>clickhouse 特点</h2><ul><li>适合做宽表，分析</li><li>单表性能优于关联查询</li><li>避免join操作，关联查询性能，<ul><li>A join B:会将B全部加载到内存</li></ul></li></ul><h2 id="clickhouse-安装"><a href="#clickhouse-安装" class="headerlink" title="clickhouse 安装"></a>clickhouse 安装</h2><p>配置打开文件限制</p><p>nofile：文件数</p><p>nproc：进程数</p><p>selinux：  security 。。 ：安全防护</p><p>ClickHouse各文件目录：<br>    bin/    ===&gt;  /usr/bin/<br>    conf/   ===&gt;  /etc/clickhouse-server/<br>    lib/    ===&gt;  /var/lib/clickhouse<br>    log/    ===&gt;  /var/log/clickhouse-server</p><p>启动clickhouse：</p><p>sudo clickhouse status;</p><p>sudo clickhouse start/stop/restart</p><p>udo vim /etc/clickhouse-server/config.xml  </p><p>clickhouse-client –query “show databases;”</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><h2 id="表索引"><a href="#表索引" class="headerlink" title="表索引"></a>表索引</h2><h3 id="MergeTree"><a href="#MergeTree" class="headerlink" title="MergeTree"></a>MergeTree</h3><h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><h5 id="列级别的TTL"><a href="#列级别的TTL" class="headerlink" title="列级别的TTL"></a>列级别的TTL</h5><h5 id="表级别的TTL"><a href="#表级别的TTL" class="headerlink" title="表级别的TTL"></a>表级别的TTL</h5><h2 id="SQL-操作"><a href="#SQL-操作" class="headerlink" title="SQL 操作"></a>SQL 操作</h2><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>join操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;h2 id=&quot;clickhouse-特点&quot;&gt;&lt;a href=&quot;#clickhouse-特点&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo简单上手</title>
    <link href="http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo/hexo%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B/"/>
    <id>http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo/hexo%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B/</id>
    <published>2023-05-02T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.259Z</updated>
    
    <content type="html"><![CDATA[<p><code>hexo</code>简单上手</p><h3 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1. 新建仓库"></a>1. 新建仓库</h3><p>gi <code>github</code> 新建一个仓库，仓库名必须为 <code>&lt;user-name&gt;.github.io</code> 格式，其中 <code>&lt;user-name&gt;</code> 是你 <code>github</code> 的昵称。</p><h3 id="2-全局安装hexo"><a href="#2-全局安装hexo" class="headerlink" title="2. 全局安装hexo"></a>2. 全局安装hexo</h3><p>可以配置cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="3-初始化项目"><a href="#3-初始化项目" class="headerlink" title="3. 初始化项目"></a>3. 初始化项目</h3><p><code>Just one</code> 命令，<code>hexo init</code>，就会自动构建一个 <code>hexo</code> 项目，紧接着执行 <code>hexo s</code>，浏览器访问 <code>localhost:4000</code> 就可以看到效果啦！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地运行</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="4-部署到github"><a href="#4-部署到github" class="headerlink" title="4. 部署到github"></a>4. 部署到github</h3><p>虽然只有一份 <code>Hello World</code>，但是我也想让全世界的人看到，成为最闪耀的那个崽，可咋整？不要慌，快速在项目根目录下找到 <code>_congif.yml</code>，找到 <code>deploy</code> 字段并填写完整，本身配置的yml文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 磊迹</span><br><span class="line">subtitle: <span class="string">'热爱可抵岁月漫长'</span></span><br><span class="line">description: <span class="string">'业精于勤，荒于嬉；行成于思，毁于随'</span></span><br><span class="line">keywords:</span><br><span class="line">author: Lei Zhou</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  trailing_html: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render: README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  field: site <span class="comment"># Apply to the whole site</span></span><br><span class="line">  exclude: <span class="string">''</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">true</span></span><br><span class="line">  tab_replace: <span class="string">''</span></span><br><span class="line">  wrap: <span class="literal">true</span></span><br><span class="line">  hljs: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">''</span></span><br><span class="line">  per_page: 15</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line">meta_generator: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"><span class="comment">## Use post's date for updated date unless set in front-matter</span></span><br><span class="line">use_date_for_updated: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment">#归档设置</span></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 30 <span class="comment">#归档页每页博客数</span></span><br><span class="line">  yearly: <span class="literal">true</span></span><br><span class="line">  monthly: <span class="literal">true</span></span><br><span class="line"><span class="comment">#标签页</span></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># Search </span></span><br><span class="line">search:</span><br><span class="line">  path: ./public/search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the 'source/' folder</span></span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: </span><br><span class="line">      githab: git@github.com:zlleige/zlleige.github.io.git,master</span><br><span class="line">      gitcafe: git@e.coding.net:zlleige/zlleige/zlleige.git,master</span><br><span class="line">      gittee: git@gitee.com:zlleige/zlleige.git,master</span><br><span class="line">    <span class="comment"># branch: master</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko  <span class="comment">#选择哪种模型</span></span><br><span class="line">  display: <span class="comment">#放置位置和大小</span></span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">false</span> <span class="comment">#是否在手机端显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">#plugins: hexo-generate-feed</span></span><br><span class="line"></span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: <span class="literal">true</span></span><br><span class="line">  time: <span class="literal">true</span></span><br><span class="line">  total_symbols: <span class="literal">true</span></span><br><span class="line">  total_time: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line">tag_cloud:</span><br><span class="line">    textFont: Trebuchet MS, Helvetica</span><br><span class="line">    textColor: <span class="string">'#333'</span></span><br><span class="line">    textHeight: 25</span><br><span class="line">    outlineColor: <span class="string">'#E2E1D1'</span></span><br><span class="line">    maxSpeed: 0.1</span><br></pre></td></tr></table></figure><p>抄写完毕！但是！我们需要额外的一个工具来帮助我们推到仓库上，那就是！那就是！那就是 <code>hexo-deployer-git</code>。搞它！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>万事俱备，只欠东南风！执行下面两个命令，就可以把项目自动部署到 <code>github</code> 上啦啦啦啦啦。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><a href="mailto:git@e.coding.net">git@e.coding.net</a>:zlleige/zlleige.git</p><h3 id="5-运行报错"><a href="#5-运行报错" class="headerlink" title="5 运行报错"></a>5 运行报错</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR </span>Cannot find module 'hexo' from 'F:\hexo'</span><br><span class="line"><span class="keyword">ERROR </span>Local hexo loading failed in F:\hexo</span><br><span class="line"><span class="keyword">ERROR </span>Try running: 'rm -rf node_modules &amp;&amp; npm install --force'</span><br></pre></td></tr></table></figure><p>直接在根目录运行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><h3 id="6-hexo-展示图片"><a href="#6-hexo-展示图片" class="headerlink" title="6 hexo 展示图片"></a>6 hexo 展示图片</h3><p>1、引入插件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">https://github.com/xcodebuild/hexo-asset-image</span></span><br></pre></td></tr></table></figure><p>2、修改_config.yml中的post_asset_folder设为true</p><p>3、typera 设置自定义图片文件夹和文件同名</p><blockquote><p>引用：</p><p><a href="https://www.jianshu.com/p/390f202c5b0e" target="_blank" rel="noopener">简书</a></p></blockquote><h3 id="7-hexo备份"><a href="#7-hexo备份" class="headerlink" title="7 hexo备份"></a>7 hexo备份</h3><p><a href="/hexo备份.md">hexo 备份</a></p><p>hexo b</p>]]></content>
    
    <summary type="html">
    
      hexo简单上手
    
    </summary>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo简单上手" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B/"/>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo简单上手" scheme="http://yoursite.com/tags/hexo%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>hexo备份</title>
    <link href="http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo/hexo%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo/hexo%E5%A4%87%E4%BB%BD/</id>
    <published>2023-05-02T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.253Z</updated>
    
    <content type="html"><![CDATA[<p>文档编写格式：</p><hr><p>title: 操作系统原理——概述<br>date: 2019-04-20<br>categories:</p><ul><li>操作系统<br>tags:</li><li>操作系统<br>description: 浅谈操作系统原理</li></ul><hr><p>coding访问地址：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问地址</span><br><span class="line"><span class="symbol">https:</span><span class="comment">//zhoulei2019.site</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//stnprv.coding-pages.com</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200829170243.png" alt="image-20200829170237299"></p><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200829172028.png" alt="image-20200829172025410"></p><h2 id="hexo-备份"><a href="#hexo-备份" class="headerlink" title="hexo 备份"></a>hexo 备份</h2><ul><li>采用hexo-git-backup插件</li></ul><blockquote><p><a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">https://github.com/coneycode/hexo-git-backup</a></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-git-<span class="keyword">backup</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>修改 <code>_config.yml</code>配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: </span><br><span class="line">      githab: git@github.com:zlleige/zlleige.github.io.git,master</span><br><span class="line">      gitcafe: git@e.coding.net:zlleige/zlleige/zlleige.git,master</span><br><span class="line">      gittee: git@gitee.com:zlleige/zlleige.git,master</span><br><span class="line">    # branch: master</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">backup:</span><br><span class="line">    type: git</span><br><span class="line">    repository:</span><br><span class="line">      githab: git@github.com:zlleige/zlleige.github.io.git,backup</span><br><span class="line">      gitcafe: git@e.coding.net:zlleige/zlleige/zlleige.git,backup</span><br><span class="line">      gittee: git@gitee.com:zlleige/zlleige.git,backup</span><br></pre></td></tr></table></figure><ul><li>备份操作：</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo b</span></span><br></pre></td></tr></table></figure><h3 id="远程备份拉取"><a href="#远程备份拉取" class="headerlink" title="远程备份拉取"></a>远程备份拉取</h3><p>从远端拉取工程到本地运行：</p><p>切换到backup分支：</p><p>根目录执行</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR </span>Cannot find module 'hexo' from 'F:\hexo'</span><br><span class="line"><span class="keyword">ERROR </span>Local hexo loading failed in F:\hexo</span><br><span class="line"><span class="keyword">ERROR </span>Try running: 'rm -rf node_modules &amp;&amp; npm install --force'</span><br></pre></td></tr></table></figure><h2 id="github-io访问不成功："><a href="#github-io访问不成功：" class="headerlink" title="github.io访问不成功："></a>github.io访问不成功：</h2><p>解决方案：DNS解析设置为114.114.114.114</p><blockquote><p><a href="https://blog.csdn.net/weixin_45085810/article/details/108339662" target="_blank" rel="noopener">一些解决方案</a></p></blockquote><h2 id="coding绑定域名错误："><a href="#coding绑定域名错误：" class="headerlink" title="coding绑定域名错误："></a>coding绑定域名错误：</h2><p>解决方案：先只需要解析一个CNAM：绑定域名记得加入WWW</p><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200905112708.png" alt="image-20200905112653237"></p>]]></content>
    
    <summary type="html">
    
      hexo备份
    
    </summary>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo备份" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo%E5%A4%87%E4%BB%BD/"/>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo备份" scheme="http://yoursite.com/tags/hexo%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>prometheus学习笔记</title>
    <link href="http://yoursite.com/%E8%BF%90%E7%BB%B4/prometheus/prometheus/"/>
    <id>http://yoursite.com/%E8%BF%90%E7%BB%B4/prometheus/prometheus/</id>
    <published>2022-05-17T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​    <a href="https://www.bilibili.com/video/BV1PT4y1P7bX?p=1" target="_blank" rel="noopener">Prometheus马哥亲讲_哔哩哔哩_bilibili</a></p></blockquote><h1 id="一、监控系统的前世今生"><a href="#一、监控系统的前世今生" class="headerlink" title="一、监控系统的前世今生"></a>一、监控系统的前世今生</h1><h2 id="1-1-监控系统发展史"><a href="#1-1-监控系统发展史" class="headerlink" title="1.1 监控系统发展史"></a>1.1 监控系统发展史</h2><p>SNMP 监控时代</p><p>当今的监控系统</p><p>未来的监控系统</p><ul><li>DataOps </li><li>AiOps</li></ul><h2 id="1-2-监控系统组件"><a href="#1-2-监控系统组件" class="headerlink" title="1.2 监控系统组件"></a>1.2 监控系统组件</h2><p>监控系统基本组件</p><ul><li>指标数据采集</li><li>指标数据存储</li><li>指标数据趋势分析及可视化</li><li>告警</li></ul><h2 id="1-3-监控体系"><a href="#1-3-监控体系" class="headerlink" title="1.3  监控体系"></a>1.3  监控体系</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518202002188.png" alt="image-20220518202002188"></p><h2 id="1-4-云原生时代的可观测性"><a href="#1-4-云原生时代的可观测性" class="headerlink" title="1.4 云原生时代的可观测性"></a>1.4 云原生时代的可观测性</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518202147401.png" alt="image-20220518202147401"></p><h2 id="1-5-监控方法论"><a href="#1-5-监控方法论" class="headerlink" title="1.5 监控方法论"></a>1.5 监控方法论</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518202745411.png" alt="image-20220518202745411"></p><h3 id="1-5-1-Google的四大黄金指标"><a href="#1-5-1-Google的四大黄金指标" class="headerlink" title="1.5.1 Google的四大黄金指标"></a>1.5.1 Google的四大黄金指标</h3><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518202939768.png" alt="image-20220518202939768"></p><h3 id="1-5-2Use-方法"><a href="#1-5-2Use-方法" class="headerlink" title="1.5.2Use 方法"></a>1.5.2Use 方法</h3><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518203122001.png" alt="image-20220518203122001"></p><h3 id="1-5-3RED-方法"><a href="#1-5-3RED-方法" class="headerlink" title="1.5.3RED 方法"></a>1.5.3RED 方法</h3><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518203246735.png" alt="image-20220518203246735"></p><h1 id="二-Prometheus-入门"><a href="#二-Prometheus-入门" class="headerlink" title="二 Prometheus 入门"></a>二 Prometheus 入门</h1><h2 id="2-1-prometheus-是什么"><a href="#2-1-prometheus-是什么" class="headerlink" title="2.1 prometheus 是什么"></a>2.1 prometheus 是什么</h2><p>​    时序数据库TSDB</p><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518203459841.png" alt="image-20220518203459841"></p><h2 id="时序数据简介"><a href="#时序数据简介" class="headerlink" title="时序数据简介"></a>时序数据简介</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518203621518.png" alt="image-20220518203621518"></p><h2 id="prometheus-do"><a href="#prometheus-do" class="headerlink" title="prometheus do"></a>prometheus do</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518203709738.png" alt="image-20220518203709738"></p><ul><li>基于http协议</li><li>pull 模式 作为客户端从endpoint抓取数据</li></ul><p>白盒监控：作为一种自行方式，被监控系统内部能够自己生成指标，由监控系统采集</p><p>黑盒监控：对于目标系统没有侵入性，基于探针的方式</p><p>采用以下三种方式进行白盒监控</p><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518203907700.png" alt="image-20220518203907700"></p><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518204608811.png" alt="image-20220518204608811"></p><ul><li>Exporters<ul><li>指标获取器，作为服务的客户端，采集原始指标，转换为prometheus格式的指标数据</li></ul></li><li>instructiontation<ul><li>系统上报的指标符合prometheus的格式</li></ul></li><li>pushgateway<ul><li>瞬时应用，上报指标</li></ul></li></ul><h2 id="pull-or-push"><a href="#pull-or-push" class="headerlink" title="pull or push"></a>pull or push</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518204632508.png" alt="image-20220518204632508"></p><h2 id="prometheus-生态组件"><a href="#prometheus-生态组件" class="headerlink" title="prometheus 生态组件"></a>prometheus 生态组件</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518204649614.png" alt="image-20220518204649614"></p><p>storage: TSDB 时序数据库</p><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518205047870.png" alt="image-20220518205047870"></p><h2 id="prometheus-数据模型"><a href="#prometheus-数据模型" class="headerlink" title="prometheus  数据模型"></a>prometheus  数据模型</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518205157706.png" alt="image-20220518205157706"></p><ul><li>每个指标都会生成时序点</li><li>同一个指标比如cpu_usage，可能匹配三个甚至多台主机，用标签区分</li></ul><h2 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518205736031.png" alt="image-20220518205736031"></p><p>指标的数据格式：</p><p>​    </p><h2 id="作业（job）和实力（instance）"><a href="#作业（job）和实力（instance）" class="headerlink" title="作业（job）和实力（instance）"></a>作业（job）和实力（instance）</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518205936127.png" alt="image-20220518205936127"></p><h2 id="PromQL"><a href="#PromQL" class="headerlink" title="PromQL"></a>PromQL</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518210447931.png" alt="image-20220518210447931"></p><h2 id="Instrumentation-程序仪表"><a href="#Instrumentation-程序仪表" class="headerlink" title="Instrumentation (程序仪表)"></a>Instrumentation (程序仪表)</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518210714619.png" alt="image-20220518210714619"></p><h2 id="Alerts"><a href="#Alerts" class="headerlink" title="Alerts"></a>Alerts</h2><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518210826906.png" alt="image-20220518210826906"></p><h1 id="三-Prometheus-架构及组件"><a href="#三-Prometheus-架构及组件" class="headerlink" title="三 Prometheus 架构及组件"></a>三 Prometheus 架构及组件</h1><p><img src="/%E8%BF%90%E7%BB%B4/prometheus/prometheus/image-20220518211408854.png" alt="image-20220518211408854"></p>]]></content>
    
    <summary type="html">
    
      prometheus学习笔记
    
    </summary>
    
    
      <category term="运维监控" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/"/>
    
      <category term="可观测性" scheme="http://yoursite.com/categories/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/"/>
    
    
      <category term="prometheus" scheme="http://yoursite.com/tags/prometheus/"/>
    
      <category term="可观测性" scheme="http://yoursite.com/tags/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/"/>
    
      <category term="运维监控" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>标准的测</title>
    <link href="http://yoursite.com/test/"/>
    <id>http://yoursite.com/test/</id>
    <published>2022-05-02T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.304Z</updated>
    
    <content type="html"><![CDATA[<p>test picture:</p><p><img src="/test/image-20220502152008997.png" alt="image-20220502152008997"></p><p>test pic2</p><p><img src="/test/image-20220502152008997.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link test 你好 %&#125;</span><br></pre></td></tr></table></figure><a href="/test/" title="你好">你好</a><p><a href="test">你好-绝对路径</a></p><p><a href="/test">你好-相对路径</a></p><p><a href="/中间件/kafka/kafka">绝对路径</a></p><p><a href="中间件/kafka/kafka">相对路径</a></p><p>fadfad</p><p>测试xmind</p><blockquote class="pullquote mindmap mindmap-md"><ul><li>Fengx<ul><li>任何方向<ul><li>编程语言<ul><li>Java</li></ul></li><li>SQL</li><li>Linux</li><li>Git</li></ul></li><li>技术<ul><li>Java Web</li><li>数据库</li><li>Docker</li><li>svn</li><li>消息队列(MQ)</li><li>mycat</li><li>大数据<ul><li>Hadoop</li><li>HBase</li></ul></li></ul></li><li>内功<ul><li>计算机基础<ul><li>计算机网络</li><li>计算机操作系统</li><li>编译原理</li><li>计算机组成原理</li></ul></li><li>数据结构与算法</li><li>设计模式</li><li>性能优化</li><li>架构设计</li><li>软件工程</li></ul></li><li>其他<ul><li>英语</li><li>博客</li></ul></li></ul></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      标准的测试
    
    </summary>
    
    
      <category term="test1" scheme="http://yoursite.com/categories/test1/"/>
    
      <category term="test2" scheme="http://yoursite.com/categories/test1/test2/"/>
    
    
      <category term="test1" scheme="http://yoursite.com/tags/test1/"/>
    
      <category term="test2" scheme="http://yoursite.com/tags/test2/"/>
    
  </entry>
  
  <entry>
    <title>typera+PicGo+Gitee配置图床</title>
    <link href="http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Typeta+picGo+Gitee%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E5%BA%8A/Typeta+PicGo+Gitee%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E5%BA%8A/"/>
    <id>http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Typeta+picGo+Gitee%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E5%BA%8A/Typeta+PicGo+Gitee%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E5%BA%8A/</id>
    <published>2022-05-02T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-配置picGo："><a href="#一-配置picGo：" class="headerlink" title="一 配置picGo："></a>一 配置picGo：</h2><p>下载gitee插件，进入对应的配置页面：</p><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200829151008.png" alt="image-20200829151006474"></p><ol><li>repo：对应码云仓库的图床仓库</li></ol><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200829151134.png" alt="image-20200829151132566"></p><ol start="2"><li>获取id-token：</li></ol><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200829151257.png" alt="image-20200829151255802"></p><blockquote><p>参考文档：</p><p><a href="https://www.e-learn.cn/topic/3751792" target="_blank" rel="noopener">picGo图床</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      图床
    
    </summary>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="图床" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%9B%BE%E5%BA%8A/"/>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="PicGo" scheme="http://yoursite.com/tags/PicGo/"/>
    
      <category term="图床" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>公钥配置</title>
    <link href="http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE/%E5%90%8C%E4%B8%80%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AEgitee%E3%80%81github%E3%80%81coding%E7%9A%84ssh%E5%85%AC%E9%92%A5/"/>
    <id>http://yoursite.com/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE/%E5%90%8C%E4%B8%80%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AEgitee%E3%80%81github%E3%80%81coding%E7%9A%84ssh%E5%85%AC%E9%92%A5/</id>
    <published>2022-05-02T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同一机器配置gitee、github、coding的ssh公钥"><a href="#同一机器配置gitee、github、coding的ssh公钥" class="headerlink" title="同一机器配置gitee、github、coding的ssh公钥"></a>同一机器配置gitee、github、coding的ssh公钥</h2><ol><li>进入.ssh目录，创建密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "xxxx@email.com" -f "github_id_rsa"</span><br><span class="line">ssg-keygen -t rsa -C "xxxx@email.com" -f "gitee_id_rsa"</span><br><span class="line">ssg-keygen -t rsa -C "xxxx@email.com" -f "coding_id_rsa"</span><br></pre></td></tr></table></figure><p>生成的文件：</p><ol start="2"><li>在.ssh目录下新建一个config文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line">User zlleige</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br><span class="line">User zlleige</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> coding</span></span><br><span class="line">Host e.coding.net</span><br><span class="line">HostName e.coding.net</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/coding_id_rsa</span><br><span class="line">User zlleige</span><br></pre></td></tr></table></figure><p>目录结构：</p><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200829145916.png" alt="image-20200829145912708"></p><ol start="3"><li>进入码云等网站配置ssh，添加ssh</li></ol><ol start="4"><li>测试连接</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br><span class="line">ssh -T git<span class="variable">@gitee</span>.com</span><br><span class="line">ssh -T git<span class="variable">@e</span>.coding.net</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>coding设置了两步验证码，需要找回：</p><p>1 微信上搜索二次验证码小程序</p><p>2 输入秘钥：L5DNNLNKULPMQ4HU 邮箱添加</p></blockquote><p><img src="https://gitee.com/zlleige/img/raw/master/https://gitee.com/zlleige/img/20200829154434.png" alt="image-20200829154426892"></p><blockquote><p>参考文档：</p><p><a href="https://blog.csdn.net/xiaoyanli8077/article/details/102715932" target="_blank" rel="noopener">配置码云、github、coding ssh</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      公钥配置
    
    </summary>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="公钥配置" scheme="http://yoursite.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hexo博客搭建" scheme="http://yoursite.com/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="公钥配置" scheme="http://yoursite.com/tags/%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer—-目录</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-%E7%9B%AE%E5%BD%95/</id>
    <published>2022-05-02T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01数据结构"><a href="#01数据结构" class="headerlink" title="01数据结构"></a>01数据结构</h1><h1 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1 数据结构"></a>1 数据结构</h1><h2 id="1-1-链表"><a href="#1-1-链表" class="headerlink" title="1.1 链表"></a>1.1 链表</h2><h2 id="1-2-树"><a href="#1-2-树" class="headerlink" title="1.2 树"></a>1.2 树</h2><h2 id="1-3-队列-amp-栈"><a href="#1-3-队列-amp-栈" class="headerlink" title="1.3 队列&amp;栈"></a>1.3 队列&amp;栈</h2><h1 id="2-算法"><a href="#2-算法" class="headerlink" title="2 算法"></a>2 算法</h1><h2 id="2-1-搜索算法"><a href="#2-1-搜索算法" class="headerlink" title="2.1 搜索算法"></a>2.1 搜索算法</h2><h2 id="2-2-动态规则"><a href="#2-2-动态规则" class="headerlink" title="2.2 动态规则"></a>2.2 动态规则</h2><p>[数组中的重复数字](/算法/剑指offer/算法-剑指offer-3. 数组中重复的数字)</p><p>[数组中的重复数字](/算法-剑指offer-5. 替换空格)</p><p>test</p><p><a href="/中间件/kafka/kafka">绝对路径kafka</a></p><p><a href="/中间件/kafka/kafka">绝对路径kafka</a></p><p>testst</p><h2 id="2-3-回溯"><a href="#2-3-回溯" class="headerlink" title="2.3 回溯"></a>2.3 回溯</h2><h2 id="2-4-排序"><a href="#2-4-排序" class="headerlink" title="2.4 排序"></a>2.4 排序</h2><h2 id="2-5-位运算"><a href="#2-5-位运算" class="headerlink" title="2.5 位运算"></a>2.5 位运算</h2><h2 id="2-6-模拟"><a href="#2-6-模拟" class="headerlink" title="2.6 模拟"></a>2.6 模拟</h2><h2 id="2-7-其他算法"><a href="#2-7-其他算法" class="headerlink" title="2.7 其他算法"></a>2.7 其他算法</h2>]]></content>
    
    <summary type="html">
    
      剑指offer刷题 数据结构
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="http://yoursite.com/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/kafka/"/>
    <id>http://yoursite.com/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/kafka/</id>
    <published>2022-05-01T01:56:46.000Z</published>
    <updated>2023-08-20T07:59:22.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一张-绪论"><a href="#第一张-绪论" class="headerlink" title="第一张 绪论"></a>第一张 绪论</h1><p>  首先介绍本文的设计背景—新增材料</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>  简要说明<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">interesting sd;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>  对于本文的设计需求</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>范德萨发</p><p><img src="/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/kafka/image-20220502140539974.png" alt="image-20220502092311113"></p><p>test 图片</p><p><img src="/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/kafka/image-20220502140539974.png" alt="image-20220502140539974"></p>]]></content>
    
    <summary type="html">
    
      kafka 基本原理及应用
    
    </summary>
    
    
      <category term="中间件" scheme="http://yoursite.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="kafka" scheme="http://yoursite.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/"/>
    
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——10.1 斐波那契数列</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.1%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.1%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-1-斐波那契数列"><a href="#10-1-斐波那契数列" class="headerlink" title="10.1 斐波那契数列"></a>10.1 斐波那契数列</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>求斐波那契数列的第 n 项，n &lt;= 39。</p><!--<div align="center"><img src="https://latex.codecogs.com/gif.latex?f(n)=\left\{\begin{array}{rcl}0&&{n=0}\\1&&{n=1}\\f(n-1)+f(n-2)&&{n>1}\end{array}\right." class="mathjax-pic"/></div> <br> --><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/45be9587-6069-4ab7-b9ac-840db1a53744.jpg" width="330px"> </div><br><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>如果使用递归求解，会重复计算一些子问题。例如，计算 f(4) 需要计算 f(3) 和 f(2)，计算 f(3) 需要计算 f(2) 和 f(1)，可以看到 f(2) 被重复计算了。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c13e2a3d-b01c-4a08-a69b-db2c4e821e09.png" width="350px"> </div><br><p>递归是将一个问题划分成多个子问题求解，动态规划也是如此，但是动态规划会把子问题的解缓存起来，从而避免重复求解子问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span>[] fib = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        fib[i] = fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> fib[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑到第 i 项只与第 i-1 和第 i-2 项有关，因此只需要存储前两项的值就能求解第 i 项，从而将空间复杂度由 O(N) 降低为 O(1)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> pre2 = <span class="number">0</span>, pre1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> fib = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fib = pre2 + pre1;</span><br><span class="line">        pre2 = pre1;</span><br><span class="line">        pre1 = fib;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于待求解的 n 小于 40，因此可以将前 40 项的结果先进行计算，之后就能以 O(1) 时间复杂度得到第 n 项的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] fib = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; fib.length; i++)</span><br><span class="line">            fib[i] = fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fib[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c++实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归-不采用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">C++ 代码</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n -- ) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = a + b;</span><br><span class="line">            a = b, b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//更好理解</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>; <span class="comment">//表示n -2 n -1 （第0 1位=0 1）</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            res = a + b;  <span class="comment">//a b c d =&gt;</span></span><br><span class="line">            a = b;</span><br><span class="line">            b = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = b;</span><br><span class="line">            b = a + b;</span><br><span class="line">            a = tmp;</span><br><span class="line">            <span class="keyword">if</span>(b &gt; <span class="number">1000000007</span>) b %= <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——10.3 跳台阶</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.3%20%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.3%20%E8%B7%B3%E5%8F%B0%E9%98%B6/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-3-跳台阶"><a href="#10-3-跳台阶" class="headerlink" title="10.3 跳台阶"></a>10.3 跳台阶</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9dae7475-934f-42e5-b3b3-12724337170a.png" width="380px"> </div><br><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>当 n = 1 时，只有一种跳法：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/72aac98a-d5df-4bfa-a71a-4bb16a87474c.png" width="250px"> </div><br><p>当 n = 2 时，有两种跳法：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1b80288d-1b35-4cd3-aa17-7e27ab9a2389.png" width="300px"> </div><br><p>跳 n 阶台阶，可以先跳 1 阶台阶，再跳 n-1 阶台阶；或者先跳 2 阶台阶，再跳 n-2 阶台阶。而 n-1 和 n-2 阶台阶的跳法可以看成子问题，该问题的递推公式为：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/508c6e52-9f93-44ed-b6b9-e69050e14807.jpg" width="350px"> </div><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">1</span>,g=<span class="number">2</span>;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            g+=f;</span><br><span class="line">            f=g-f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3><p>设跳上 nn 级台阶有 f(n)f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况： 跳上 11 级或 22 级台阶。<br>当为 11 级台阶： 剩 n-1n−1 个台阶，此情况共有 f(n-1)f(n−1) 种跳法；<br>当为 22 级台阶： 剩 n-2n−2 个台阶，此情况共有 f(n-2)f(n−2) 种跳法。<br>f(n)f(n) 为以上两种情况之和，即 f(n)=f(n-1)+f(n-2)f(n)=f(n−1)+f(n−2) ，以上递推性质为斐波那契数列。本题可转化为 求斐波那契数列第 nn 项的值 ，与 面试题10- I. 斐波那契数列 等价，唯一的不同在于起始数字不同。<br>青蛙跳台阶问题： f(0)=1f(0)=1 , f(1)=1f(1)=1 , f(2)=2f(2)=2 ；<br>斐波那契数列问题： f(0)=0f(0)=0 , f(1)=1f(1)=1 , f(2)=1f(2)=1 。</p><p>作者：jyd<br>链接：<a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/solution/mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/solution/mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numWays</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// f(n) = f(n-1) + f(n-2)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>; <span class="comment">// n=0 &gt;1</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">1</span>; <span class="comment">// n=1 &gt; 1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = b;</span><br><span class="line">            b = a+b;</span><br><span class="line">            a = tmp;</span><br><span class="line">            <span class="keyword">if</span>(b &gt; <span class="number">1000000007</span> ) b %= <span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——10.2 矩形覆盖</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.2%20%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.2%20%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-2-矩形覆盖"><a href="#10-2-矩形覆盖" class="headerlink" title="10.2 矩形覆盖"></a>10.2 矩形覆盖</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>我们可以用 2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2*1 的小矩形无重叠地覆盖一个 2*n 的大矩形，总共有多少种方法？</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b903fda8-07d0-46a7-91a7-e803892895cf.gif" width="100px"> </div><br><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>当 n 为 1 时，只有一种覆盖方法：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f6e146f1-57ad-411b-beb3-770a142164ef.png" width="100px"> </div><br><p>当 n 为 2 时，有两种覆盖方法：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/fb3b8f7a-4293-4a38-aae1-62284db979a3.png" width="200px"> </div><br><p>要覆盖 2*n 的大矩形，可以先覆盖 2*1 的矩形，再覆盖 2*(n-1) 的矩形；或者先覆盖 2*2 的矩形，再覆盖 2*(n-2) 的矩形。而覆盖 2*(n-1) 和 2*(n-2) 的矩形可以看成子问题。该问题的递推公式如下：</p><!-- <div align="center"><img src="https://latex.codecogs.com/gif.latex?f(n)=\left\{\begin{array}{rcl}1&&{n=1}\\2&&{n=2}\\f(n-1)+f(n-2)&&{n>1}\end{array}\right." class="mathjax-pic"/></div> <br> --><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/508c6e52-9f93-44ed-b6b9-e69050e14807.jpg" width="370px"> </div><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rectCover</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> f2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> f3;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= number; i++) &#123;</span><br><span class="line">            f3 = f1 + f2;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = f3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——10.4 变态跳台阶</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.4%20%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-10.4%20%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-4-变态跳台阶"><a href="#10-4-变态跳台阶" class="headerlink" title="10.4 变态跳台阶"></a>10.4 变态跳台阶</h1><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级… 它也可以跳上 n 级。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cd411a94-3786-4c94-9e08-f28320e010d5.png" width="380px"> </div><br><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        <span class="keyword">int</span> total=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;number;i++)</span><br><span class="line">            total*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h3><p>跳上 n-1 级台阶，可以从 n-2 级跳 1 级上去，也可以从 n-3 级跳 2 级上去…，那么</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span>(<span class="variable">n</span>-<span class="number">1</span>) = <span class="title">f</span>(<span class="variable">n</span>-<span class="number">2</span>) + <span class="title">f</span>(<span class="variable">n</span>-<span class="number">3</span>) + ... + <span class="title">f</span>(<span class="number">0</span>)</span></span><br></pre></td></tr></table></figure><p>同样，跳上 n 级台阶，可以从 n-1 级跳 1 级上去，也可以从 n-2 级跳 2 级上去… ，那么</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span>(<span class="variable">n</span>) = <span class="title">f</span>(<span class="variable">n</span>-<span class="number">1</span>) + <span class="title">f</span>(<span class="variable">n</span>-<span class="number">2</span>) + ... + <span class="title">f</span>(<span class="number">0</span>)</span></span><br></pre></td></tr></table></figure><p>综上可得</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="name">n</span>) - f(<span class="name">n-1</span>) = f(<span class="name">n-1</span>)</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="name">n</span>) = <span class="number">2</span>*f(<span class="name">n-1</span>)</span><br></pre></td></tr></table></figure><p>所以 f(n) 是一个等比数列</p><p>f(n) = 2^(n-1)  n&gt;=1   =&gt;求和   sn=  2^(n-1)</p><p>![image-20220502203248845](算法-剑指offer-10.4 变态跳台阶/image-20220502203248845.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int JumpFloorII(int target) &#123;</span><br><span class="line">    return (int) Math.pow(2, target - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——12. 矩阵中的路径</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-12.%20%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-12.%20%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-矩阵中的路径"><a href="#12-矩阵中的路径" class="headerlink" title="12. 矩阵中的路径"></a>12. 矩阵中的路径</h1><p><a href="https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc?tpId=13&tqId=11218&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向上下左右移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。</p><p>例如下面的矩阵包含了一条 bfce 路径。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1db1c7ea-0443-478b-8df9-7e33b1336cc4.png" width="200px"> </div><br><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用回溯法（backtracking）进行求解，它是一种暴力搜索方法，通过搜索所有可能的结果来求解问题。回溯法在一次搜索结束时需要进行回溯（回退），将这一次搜索过程中设置的状态进行清除，从而开始一次新的搜索过程。例如下图示例中，从 f 开始，下一步有 4 种搜索可能，如果先搜索 b，需要将 b 标记为已经使用，防止重复使用。在这一次搜索结束之后，需要将 b 的已经使用状态清除，并搜索 c。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/dc964b86-7a08-4bde-a3d9-e6ddceb29f98.png" width="200px"> </div><br><p>本题的输入是数组而不是矩阵（二维数组），因此需要先将数组转换成矩阵。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix, <span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.empty() || matrix.at(<span class="number">0</span>).empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> row = matrix.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> col = matrix.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//轮循矩阵所有的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= row; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= col; j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(matrix, str, <span class="number">0</span>, i, j)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    matrix: 轮循的矩阵</span></span><br><span class="line"><span class="comment">    str:带查找的字符串</span></span><br><span class="line"><span class="comment">    strIndex：当前查找的str的下标</span></span><br><span class="line"><span class="comment">    x，y：当前查找的矩阵中的坐标</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; matrix, <span class="built_in">string</span> &amp;str, <span class="keyword">int</span> strIndex, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//--边界</span></span><br><span class="line">        <span class="comment">//判断当前字符是否相等</span></span><br><span class="line">        <span class="keyword">if</span>(str[strIndex] != matrix[x][y]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//如果当前的字串匹配上 返回</span></span><br><span class="line">        <span class="keyword">if</span>(strIndex == str.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//--当前字符匹配，查找下一个字符</span></span><br><span class="line">        <span class="keyword">char</span> t = matrix[x][y]; <span class="comment">//记录当前的字符 用于回溯</span></span><br><span class="line">        matrix[x][y] = t + <span class="number">1</span>;<span class="comment">//t + 1; //'*' //避免回溯重复查找 用一个特殊字符或者改变值</span></span><br><span class="line">        <span class="comment">//定义方向变量  用于四个反向 左下右上 </span></span><br><span class="line">        <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = x + dx[i],  b = y + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(a &gt;= <span class="number">0</span> &amp;&amp; a &lt; matrix.<span class="built_in">size</span>() &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; matrix[<span class="number">0</span>].<span class="built_in">size</span>())</span><br><span class="line">                <span class="keyword">if</span>(dfs(matrix, str, strIndex + <span class="number">1</span>, a, b)) <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//找到结果即返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//--恢复数据 没有找到 切换下一个点</span></span><br><span class="line">        matrix[x][y] = t ;  <span class="comment">//回溯</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.length==<span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span> || word == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> row = board.length;</span><br><span class="line">        <span class="keyword">int</span> col = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[row][col];</span><br><span class="line">        <span class="comment">// 遍历矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, i, j, word, <span class="number">0</span>, vis)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y, String word, <span class="keyword">int</span> u, <span class="keyword">boolean</span>[][] vis)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前矩阵和数组字符不同 返回FALSE；当字符串匹配完成，返回true</span></span><br><span class="line">        <span class="keyword">if</span>(word.charAt(u) != board[x][y]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == word.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 防止重复</span></span><br><span class="line">        vis[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> dx[] = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 遍历四个方向 左下右上</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = dx[i] + x;</span><br><span class="line">            <span class="keyword">int</span> ny = dy[i] + y;</span><br><span class="line">            <span class="keyword">if</span>(nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; board.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; board[<span class="number">0</span>].length &amp;&amp; !vis[nx][ny]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, nx, ny, word, u+<span class="number">1</span>, vis)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[x][y] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无需状态数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.length==<span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span> || word == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> row = board.length;</span><br><span class="line">        <span class="keyword">int</span> col = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 遍历矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, i, j, word, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y, String word, <span class="keyword">int</span> u )</span></span>&#123;</span><br><span class="line">        <span class="comment">// 当前矩阵和数组字符不同 返回FALSE；当字符串匹配完成，返回true</span></span><br><span class="line">        <span class="keyword">if</span>(word.charAt(u) != board[x][y]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u == word.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 防止重复</span></span><br><span class="line">        <span class="keyword">char</span> t = board[x][y];</span><br><span class="line">        board[x][y] = <span class="string">'*'</span>;</span><br><span class="line">        <span class="keyword">int</span> dx[] = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 遍历四个方向 左下右上</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = dx[i] + x;</span><br><span class="line">            <span class="keyword">int</span> ny = dy[i] + y;</span><br><span class="line">            <span class="keyword">if</span>(nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; board.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; board[<span class="number">0</span>].length) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, nx, ny, word, u+<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        board[x][y] = t;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——13. 机器人的运动范围</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-13.%20%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-13.%20%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-机器人的运动范围"><a href="#13-机器人的运动范围" class="headerlink" title="13. 机器人的运动范围"></a>13. 机器人的运动范围</h1><p><a href="https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&tqId=11219&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>地上有一个 m 行和 n 列的方格。一个机器人从坐标 (0, 0) 的格子开始移动，每一次只能向左右上下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于 k 的格子。</p><p>例如，当 k 为 18 时，机器人能够进入方格 (35,37)，因为 3+5+3+7=18。但是，它不能进入方格 (35,38)，因为 3+5+3+8=19。请问该机器人能够达到多少个格子？</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用深度优先搜索（Depth First Search，DFS）方法进行求解。回溯是深度优先搜索的一种特例，它在一次搜索过程中需要设置一些本次搜索过程的局部状态，并在本次搜索结束之后清除状态。而普通的深度优先搜索并不需要使用这些局部状态，虽然还是有可能设置一些全局状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回溯法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rows &lt;= <span class="number">0</span> || cols &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; <span class="title">isVisited</span><span class="params">(rows, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(cols, <span class="literal">false</span>))</span></span>; <span class="comment">//用于标记是否访问</span></span><br><span class="line">        <span class="keyword">int</span> count = movingCountCore(threshold, rows, cols, <span class="number">0</span>, <span class="number">0</span>, isVisited);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">movingCountCore</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt;&amp; isVisited)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(row &lt; <span class="number">0</span> || row &gt;= rows|| col &lt; <span class="number">0</span> || col &gt;= cols || isVisited[row][col])</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(checkNums(threshold, row, col))</span><br><span class="line">         &#123;</span><br><span class="line">             isVisited[row][col] = <span class="literal">true</span>;</span><br><span class="line">             <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> ,<span class="number">1</span>&#125;, res = <span class="number">1</span>;</span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">4</span>; i++)</span><br><span class="line">                 res += movingCountCore(threshold, rows, cols, row + dx[i], col + dy[i], isVisited); <span class="comment">//递归</span></span><br><span class="line">             <span class="keyword">return</span> res;</span><br><span class="line">            <span class="comment">// return 1 + movingCountCore(threshold, rows, cols, row -1, col, isVisited) </span></span><br><span class="line">            <span class="comment">//         + movingCountCore(threshold, rows, cols, row , col -1, isVisited) </span></span><br><span class="line">            <span class="comment">//         + movingCountCore(threshold, rows, cols, row + 1, col, isVisited) </span></span><br><span class="line">            <span class="comment">//         + movingCountCore(threshold, rows, cols, row, col + 1, isVisited);</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">checkNums</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(row &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += row % <span class="number">10</span>;</span><br><span class="line">            row /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(col &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += col % <span class="number">10</span>;</span><br><span class="line">            col /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &lt;= threshold;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//牛客网  bool *</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rows &lt;= <span class="number">0</span> || cols &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span>* isVisited = <span class="keyword">new</span> <span class="keyword">bool</span>[rows * cols]; <span class="comment">//用于标记</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows * cols; i ++) <span class="comment">//初始化</span></span><br><span class="line">        &#123;</span><br><span class="line">            isVisited[i] = <span class="literal">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = movingCountCore(threshold, rows, cols, <span class="number">0</span>, <span class="number">0</span>, isVisited);</span><br><span class="line">        <span class="keyword">delete</span>[] isVisited;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">movingCountCore</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">bool</span>* isVisited)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row &lt; <span class="number">0</span> || row &gt;= rows || col &lt; <span class="number">0</span> || col &gt;= cols || isVisited[row * cols + col] ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(checkNums(threshold, row, col))</span><br><span class="line">        &#123;</span><br><span class="line">            isVisited[row * cols + col] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, res = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                res += movingCountCore(threshold, rows, cols,row + dx[i], col + dy[i], isVisited);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkNums</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(row &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += row % <span class="number">10</span>; <span class="comment">//各位数和</span></span><br><span class="line">            row /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(col &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += col % <span class="number">10</span>; <span class="comment">//各位数和</span></span><br><span class="line">            col /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &lt;= threshold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><p>DFS：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// dfs</span></span><br><span class="line">        <span class="keyword">if</span>(m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || k &lt;<span class="number">0</span>)  &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> vis[][] = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">return</span> dfs(m, n, <span class="number">0</span>, <span class="number">0</span>, k,vis);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k, <span class="keyword">boolean</span>[][] vis)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 边界条件</span></span><br><span class="line">        <span class="keyword">if</span>(x &lt;<span class="number">0</span> || x &gt;= m || y&lt;<span class="number">0</span> || y &gt;=n || vis[x][y] || !isVisit(x, y, k) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前位置记录可达</span></span><br><span class="line">        vis[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 遍历四个方向，可达数据之和返回</span></span><br><span class="line">        <span class="keyword">int</span> dx[] = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;; </span><br><span class="line">        <span class="keyword">int</span> dy[] = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">            res += dfs(m, n, nx, ny,k,vis);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return 1 + dfs(m, n, x +1, y,k,vis) +dfs(m, n, x -1, y,k,vis) +dfs(m, n, x, y+1,k,vis) +dfs(m, n, x, y-1,k,vis);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSum</span> <span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVisit</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSum(x) +getSum(y) &lt;= k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——11. 旋转数组的最小数字</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-旋转数组的最小数字"><a href="#11-旋转数组的最小数字" class="headerlink" title="11. 旋转数组的最小数字"></a>11. 旋转数组的最小数字</h1><p><a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&tqId=11159&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0038204c-4b8a-42a5-921d-080f6674f989.png" width="210px"> </div><br><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>将旋转数组对半分可以得到一个包含最小元素的新旋转数组，以及一个非递减排序的数组。新的旋转数组的数组元素是原数组的一半，从而将问题规模减少了一半，这种折半性质的算法的时间复杂度为 O(logN)（为了方便，这里将 log<sub>2</sub>N 写为 logN）。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/424f34ab-a9fd-49a6-9969-d76b42251365.png" width="300px"> </div><br><p><strong>分析：</strong></p><p>1、交换前：单调递增，但是可能存在相同数的情况</p><p><img src="/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/C:%5CUsers%5Clenovo%5CAppData%5CLocal%5CYNote%5Cdata%5Cm18428365094_1@163.com%5C8b40652667604dc7b2b107a1db2368a8%5Cclipboard.png" alt="img"></p><p>2、交换后：整个数组从左至右分成两段，最初和最末可能出现相同的值</p><p><img src="/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/C:%5CUsers%5Clenovo%5CAppData%5CLocal%5CYNote%5Cdata%5Cm18428365094_1@163.com%5Cc643ef7e854a47388202de025382667f%5Cclipboard.png" alt="img"></p><p>3、可以从后往前删掉与nums[0]相同的数据，得到后半部分单调</p><p>考虑两种情况：</p><p><img src="/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-11.%20%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/C:%5CUsers%5Clenovo%5CAppData%5CLocal%5CYNote%5Cdata%5Cm18428365094_1@163.com%5Cec2ebcd559c24717b44c0d2f31c25067%5Cclipboard.png" alt="img"></p><p>4、二分数组下标 </p><p>数组[0-n], l=0,r=n  mid=l+r&gt;&gt;1;</p><p>if(nums[mid]&gt;nums[0])  证明当前的mid在上图的左边，应该选择右边取最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> len = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//1--删除旋转后 最后部分与nums[0]的相同部分</span></span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">0</span> &amp;&amp; nums[len] == nums[<span class="number">0</span>]) len -- ;</span><br><span class="line">        <span class="comment">//2--判断此时的数组是否单调(nums[0]最小)，还是分成了两段</span></span><br><span class="line">        <span class="keyword">if</span>(nums[len] &gt;= nums[<span class="number">0</span>]) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//3--二分找出最小的位置</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = len;  <span class="comment">//对应小标</span></span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; <span class="comment">//区间 [l,mid] [mid + 1, r]</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[<span class="number">0</span>]) r = mid;  <span class="comment">//在左边</span></span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><p>[leetcode题解](<a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/" target="_blank" rel="noopener">旋转数组的最小数字 - 旋转数组的最小数字 - 力扣（LeetCode） (leetcode-cn.com)</a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minArray</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 旋转后，存在最小值x，使得左侧数据&gt;=x，右侧数据&lt;=x.满足二分性质</span></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = num.length -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三种情况：可能存在[22222 012222]此时mid会有和high相同的情况，但是无法判断是在左右区间，所以可以提前处理相同的数据</span></span><br><span class="line">        <span class="keyword">while</span>(high &gt; <span class="number">0</span> &amp;&amp; num[high] == num[low]) &#123;</span><br><span class="line">            high --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num[high] &gt;= num[low]) <span class="keyword">return</span> num[low];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high -low)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (num[mid] &lt;= num[high]) &#123;</span><br><span class="line">                <span class="comment">// 第一种情况：mid小于high,最小值在左边，但此时mid可能为最小值，取high=mid;</span></span><br><span class="line">                high = mid; </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num[mid] &gt; num[high])&#123;</span><br><span class="line">                <span class="comment">// 第二种情况：mid大于high,最小值在右边，但此时mid不可能为最小值，取low=mid+1;</span></span><br><span class="line">                low = mid + <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> num[high];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——14. 剪绳子</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-14.%20%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-14.%20%E5%89%AA%E7%BB%B3%E5%AD%90/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-剪绳子"><a href="#14-剪绳子" class="headerlink" title="14. 剪绳子"></a>14. 剪绳子</h1><p><a href="https://leetcode.com/problems/integer-break/description/" target="_blank" rel="noopener">Leetcode</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>把一根绳子剪成多段，并且使得每段的长度乘积最大。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 2</span><br><span class="line">return 1 (2 = 1 + 1)</span><br><span class="line"></span><br><span class="line">n = 10</span><br><span class="line">return 36 (10 = 3 + 3 + 4)</span><br></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p>尽可能多剪长度为 3 的绳子，并且不允许有长度为 1 的绳子出现。如果出现了，就从已经切好长度为 3 的绳子中拿出一段与长度为 1 的绳子重新组合，把它们切成两段长度为 2 的绳子。</p><p>证明：当 n &gt;= 5 时，3(n - 3) - n = 2n - 9 &gt; 0，且 2(n - 2) - n = n - 4 &gt; 0。因此在 n &gt;= 5 的情况下，将绳子剪成一段为 2 或者 3，得到的乘积会更大。又因为 3(n - 3) - 2(n - 2) = n - 5 &gt;= 0，所以剪成一段长度为 3 比长度为 2 得到的乘积更大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProductAfterCutting</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> greedSolution(length);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//贪心</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">greedSolution</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> nums3 = len / <span class="number">3</span>; <span class="comment">//尽量多分成3 </span></span><br><span class="line">        <span class="comment">//求len对3的余数，0、2：不管  1：说明余数4  此时应该拆分为2 * 2</span></span><br><span class="line">        <span class="keyword">if</span>(len - nums3 * <span class="number">3</span> == <span class="number">1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            nums3 -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nums2 = (len - nums3 * <span class="number">3</span>) / <span class="number">2</span>;  <span class="comment">//可以得到余下2的个数 主要存在两种情况（余下4 =》2*2 余下5=》3*2）</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)pow(<span class="number">3</span>,nums3) * (<span class="keyword">int</span>)pow(<span class="number">2</span>,nums2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span> * (n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>) res = <span class="number">4</span>, n -= <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>) res = <span class="number">2</span>, n -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) res *= <span class="number">3</span>, n -= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;=<span class="number">3</span>) <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 讨论n%3的余数，找规律</span></span><br><span class="line">        <span class="keyword">int</span> mod = n % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> c = n / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(mod == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 4 7 10   (1,3)-&gt;(2,2)</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)Math.pow(<span class="number">3</span>, c-<span class="number">1</span>) * <span class="number">2</span> *<span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(mod == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 5 8</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)Math.pow(<span class="number">3</span>, c) * <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 6 9</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)Math.pow(<span class="number">3</span>, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProductAfterCutting</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return greedSolution(length);</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dpSolution(length);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//dp</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dpSolution</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> *dp = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>]; <span class="comment">//存入结果</span></span><br><span class="line">        <span class="comment">//初始化 比如 dp(4)=max(dp(1,3), dp(2,2))  表示当前len（&gt;4）长度的绳子分成所有情况的最大值</span></span><br><span class="line">        <span class="comment">//之所以 0-3 对应的dp[i] = i;是为了组合len》3的情况下的长度，不是说要将len在分开。dp即为当前不分割的长度（即为本身长度）</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> maxD = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从下至上计算，保存当前的值 dp(n) = max(f(j)* f(n-j)); 对应j循环得到最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= len; i  ++)</span><br><span class="line">        &#123;</span><br><span class="line">            maxD = <span class="number">0</span>;  <span class="comment">//初始为0</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i/<span class="number">2</span>; j ++) <span class="comment">//j在1-i/2即可获得所有的情况  比如 dp(4)=max(dp(1,3), dp(2,2))</span></span><br><span class="line">            &#123;</span><br><span class="line">                maxD = max(maxD, dp[j] * dp[i - j]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = maxD; <span class="comment">//存下最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxD = dp[len];</span><br><span class="line">        delete[] dp;</span><br><span class="line">        <span class="keyword">return</span> maxD;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="剪绳子-2"><a href="#剪绳子-2" class="headerlink" title="剪绳子 2"></a>剪绳子 2</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">答案需要取模 <span class="number">1e9</span>+<span class="number">7</span>（<span class="number">1000000007</span>），如计算初始结果为：<span class="number">1000000008</span>，</span><br><span class="line"><span class="number">2</span> &lt;= n &lt;= <span class="number">1000</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最大int 2147483647，为防止在某一次 mul乘3已经溢出，类型需要设为long</span></span><br><span class="line">        <span class="keyword">long</span> mul = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3,3,3,3,3,4</span></span><br><span class="line">        <span class="comment">//3,3,3,3,3,3</span></span><br><span class="line">        <span class="comment">//3,3,3,3,3,2</span></span><br><span class="line">        <span class="comment">//3,3,3,3,3,1  X 此种情况算在和前面 3+1 和为 4</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">//每次乘积后取余防止大数</span></span><br><span class="line">            mul = mul * <span class="number">3</span> % <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">            n -= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (mul * n % <span class="number">1000000007</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——15. 二进制中 1 的个数</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-15.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-15.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="15-二进制中-1-的个数"><a href="#15-二进制中-1-的个数" class="headerlink" title="15. 二进制中 1 的个数"></a>15. 二进制中 1 的个数</h1><p><a href="https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整数，输出该数二进制表示中 1 的个数。</p><h3 id="n-amp-n-1"><a href="#n-amp-n-1" class="headerlink" title="n&amp;(n-1)"></a>n&amp;(n-1)</h3><p>该位运算去除 n 的位级表示中最低的那一位。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n       : <span class="number">10110100</span></span><br><span class="line">n<span class="number">-1</span>     : <span class="number">10110011</span></span><br><span class="line">n&amp;(n<span class="number">-1</span>) : <span class="number">10110000</span></span><br></pre></td></tr></table></figure><p>时间复杂度：O(M)，其中 M 表示 1 的个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//注意对于n！=0的判断</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span> &amp;&amp; n != <span class="number">0</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            nums += n &amp; <span class="number">1</span>;</span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>; <span class="comment">//前位补0  </span></span><br><span class="line">            <span class="comment">//cout &lt;&lt; n &lt;&lt; " ";</span></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//cout &lt;&lt;endl;</span></span><br><span class="line">         <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> un = n; </span><br><span class="line">        <span class="keyword">while</span> (un) res += un &amp; <span class="number">1</span>, un &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法一：循环检查二进制位"><a href="#方法一：循环检查二进制位" class="headerlink" title="方法一：循环检查二进制位"></a>方法一：循环检查二进制位</h4><p><strong>思路及解法</strong></p><p>我们可以直接循环检查给定整数 <em>n</em> 的二进制位的每一位是否为 1。</p><p>具体代码中，当检查第 <em>i</em> 位时，我们可以让 <em>n</em> 与 2<em>i</em> 进行与运算，当且仅当 <em>n</em> 的第 <em>i</em> 位为 1 时，运算结果不为 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="number">32</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                res ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：位运算优化"><a href="#方法二：位运算优化" class="headerlink" title="方法二：位运算优化"></a>方法二：位运算优化</h4><p><strong>思路及解法</strong></p><p>观察这个运算：<em>n</em> &amp; (<em>n</em>−1)，其预算结果恰为把 <em>n</em> 的二进制位中的最低位的 1 变为 0 之后的结果。</p><p>如：6 &amp; (6−1)=4,6=(110)2,4=(100)2，运算结果 4 即为把 6 的二进制位中的最低位的 1 变为 0 之后的结果。</p><p>这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的 <em>n</em> 与 <em>n</em>−1 做与运算，直到 <em>n</em> 变为 0 即可。因为每次运算会使得 <em>n</em> 的最低位的 1 被翻转，因此运算次数就等于 <em>n</em> 的二进制位中 1 的个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    &#x2F;&#x2F; you need to treat n as an unsigned value</span><br><span class="line">    public int hammingWeight(int n) &#123;</span><br><span class="line">        int res &#x3D; 0;</span><br><span class="line">        while(n !&#x3D; 0) &#123;</span><br><span class="line">            n &amp;&#x3D; n -1;</span><br><span class="line">            res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——16. 数值的整数次方</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-16.%20%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-16.%20%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="16-数值的整数次方"><a href="#16-数值的整数次方" class="headerlink" title="16. 数值的整数次方"></a>16. 数值的整数次方</h1><p><a href="https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking&from=cyc_github" target="_blank" rel="noopener">NowCoder</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 double 类型的浮点数 base 和 int 类型的整数 exponent，求 base 的 exponent 次方。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>下面的讨论中 x 代表 base，n 代表 exponent。</p><!--<div align="center"><img src="https://latex.codecogs.com/gif.latex?x^n=\left\{\begin{array}{rcl}(x*x)^{n/2}&&{n\%2=0}\\x*(x*x)^{n/2}&&{n\%2=1}\end{array}\right." class="mathjax-pic"/></div> <br>--><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/48b1d459-8832-4e92-938a-728aae730739.jpg" width="330px"> </div><br><p>因为 (x*x)<sup>n/2</sup> 可以通过递归求解，并且每次递归 n 都减小一半，因此整个算法的时间复杂度为 O(logN)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="comment">//迭代</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">bool</span> isBig = exponent &gt; <span class="number">0</span>; <span class="comment">//标志当前的幂次正负</span></span><br><span class="line">        <span class="keyword">if</span>(!isBig) exponent = -exponent;</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(exponent --) res *= base;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> isBig ? res : <span class="number">1</span> / res; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">O(N)</span></span><br><span class="line"><span class="comment">pow(b,e)=</span></span><br><span class="line"><span class="comment">e=0 1;</span></span><br><span class="line"><span class="comment">e&gt;0 b*pow(b,e-1)</span></span><br><span class="line"><span class="comment">e&lt;0 1/(b*pow(b,e+1))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(exponent &gt; <span class="number">0</span>) <span class="keyword">return</span> base * Power(base, --exponent );</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            exponent = -exponent;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; exponent &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span> / (base * Power(base, --exponent ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer——17. 打印从 1 到最大的 n 位数</title>
    <link href="http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-17.%20%E6%89%93%E5%8D%B0%E4%BB%8E%201%20%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84%20n%20%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E7%AE%97%E6%B3%95-%E5%89%91%E6%8C%87offer-17.%20%E6%89%93%E5%8D%B0%E4%BB%8E%201%20%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84%20n%20%E4%BD%8D%E6%95%B0/</id>
    <published>2020-02-14T16:00:00.000Z</published>
    <updated>2023-08-20T07:59:22.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="17-打印从-1-到最大的-n-位数"><a href="#17-打印从-1-到最大的-n-位数" class="headerlink" title="17. 打印从 1 到最大的 n 位数"></a>17. 打印从 1 到最大的 n 位数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数即 999。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于 n 可能会非常大，因此不能直接用 int 表示数字，而是用 char 数组进行存储。</p><p>使用回溯法得到所有的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMaxNDigits</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintToMaxNDigits</span><span class="params">(<span class="keyword">char</span> *number, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">char</span> *number)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n) PrintMaxNDigits(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMaxNDigits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//n位上的0-9的全排列问题</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">char</span> *number = <span class="keyword">new</span> <span class="keyword">char</span>[n + <span class="number">1</span>];</span><br><span class="line">    memset(number, <span class="string">'0'</span>, n);</span><br><span class="line">    number[n] = <span class="string">'\0'</span>; <span class="comment">//末尾，用字符串时，高位在前，低位在后存</span></span><br><span class="line">    <span class="keyword">while</span>(!Increment(number)) PrintNumber(number);</span><br><span class="line">    delete[]number;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Increment</span><span class="params">(<span class="keyword">char</span> *number)</span> </span>&#123; <span class="comment">//加法模拟</span></span><br><span class="line">    bool IsOF =<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> CV = <span class="number">0</span>, len = strlen(number);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len-<span class="number">1</span>; i&gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = number[i]-<span class="string">'0'</span>+CV;</span><br><span class="line">        <span class="keyword">if</span>(i == len-<span class="number">1</span>) sum++;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>) IsOF = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                sum -= <span class="number">10</span>;</span><br><span class="line">                CV = <span class="number">1</span>;</span><br><span class="line">                number[i] = <span class="string">'0'</span>+sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            number[i] = <span class="string">'0'</span>+sum;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> IsOF;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">char</span> *number)</span> </span>&#123; <span class="comment">//输出 </span></span><br><span class="line">    <span class="keyword">int</span> len=strlen(number); </span><br><span class="line">    bool tag=<span class="keyword">true</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123; </span><br><span class="line">        <span class="keyword">if</span>(tag&amp;&amp;number[i]!=<span class="string">'0'</span>) tag=<span class="keyword">false</span>; <span class="comment">//高位为0的不输出 </span></span><br><span class="line">        <span class="keyword">if</span>(!tag) cout&lt;&lt;number[i]; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(!tag) cout&lt;&lt;endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全排列：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMaxNDigits</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintToMaxNDigits</span><span class="params">(<span class="keyword">char</span> *number, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">char</span> *number)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n) PrintMaxNDigits(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMaxNDigits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//n位上的0-9的全排列问题</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">char</span> *number = <span class="keyword">new</span> <span class="keyword">char</span>[n + <span class="number">1</span>];</span><br><span class="line">    number[n] = <span class="string">'\0'</span>; <span class="comment">//末尾，用字符串时，高位在前，低位在后存</span></span><br><span class="line">    PrintToMaxNDigits(number, n, <span class="number">0</span>); <span class="comment">//已修改，比之前更简洁 </span></span><br><span class="line">    <span class="keyword">delete</span>[]number;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintToMaxNDigits</span><span class="params">(<span class="keyword">char</span> *number, <span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">//递归的过程</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(number);</span><br><span class="line">    <span class="keyword">if</span> (index == len) &#123;   <span class="comment">//递归终止条件</span></span><br><span class="line">    PrintNumber(number);  <span class="comment">//打印出当前的数字 </span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  <span class="comment">//递归分支，当前数取0~9 </span></span><br><span class="line">    number[index] = i + <span class="string">'0'</span>;</span><br><span class="line">    PrintToMaxNDigits(number, len, index + <span class="number">1</span>);  <span class="comment">//递归深度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintNumber</span><span class="params">(<span class="keyword">char</span> *number)</span> </span>&#123; <span class="comment">//输出 </span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(number), index = <span class="number">0</span>;;</span><br><span class="line">    <span class="keyword">while</span>(index &lt; len &amp;&amp; number[i] == <span class="string">'0'</span>) ++index; <span class="comment">//高位为0的不输出</span></span><br><span class="line">    <span class="keyword">if</span>(index &lt; len) &#123;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; len) <span class="built_in">cout</span> &lt;&lt; number[i]; </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考：[<a href="https://blog.csdn.net/qq_15711195/article/details/94651798]" target="_blank" rel="noopener">https://blog.csdn.net/qq_15711195/article/details/94651798]</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      剑指offer刷题
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
</feed>
